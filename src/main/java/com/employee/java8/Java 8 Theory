1-Lambda Expression?
 By the Lambda Expression we can represent an anonymous function
 Anonymous means  Name less / Unknown
 Anonymous function : Which method who don't have any name or modifier

 Syntax: Parameter     Expression       Body
            ()              ->          System.out.println("Aamir khan");

 The Interface who contain only one abstract method but can have multiple default & static method
 is called Functional Interface.

 Ex.
        Runnable   ->    run();
        Callable   ->    call();
        Comparable ->    compareTo();
        Comparator ->    compare();

2- Consumer Functional Interface?
    it is a functional interface which is introduce in java 8
    Consumer takes an object in input and produce a result
    consumer function don't return any value because accept method return type is void
    only one abstract method   void accept(T t);


3- Predicate Functional interface?
    it is a functional interface which is introduce in java 8
    Takes one arguments in input and return the boolean value
    only one abstract method  boolean test(T t);


4- Supplier Functional Interface?
    it is a functional interface which is introduce in java 8
    Takes no argument but output expected
    only one abstract method  T get();

5- Stream in java?
   Stream API is used to process collection of object
    A stream a sequence of object that support the various method
    which can be pipelined to produce the desire result.

   A Stream is not a data structure instead it takes input from the collections,
   Arrays, or I/O channels.

   Stream don't change the original data structure, they only provide the result
   as per the pipelined methods.

6- Why we need Stream?
   1-Functional Programming (achieving the functional interface)
   2-Code Reduce (if we are using lambda expression the code line will be reduce)
   3-Bulk Operation

7- map and flatMap
    1- map() method use for the transformation
    data transformation means (getting a lowercase stream alphabet and converting that alphabet in upper case)
    Stream.of("a","b","c","d")   after converting [A,B,C,D]
    takes a Stream input and returns a Stream in output
    It is also called one-to-one mapping
    Stream(R) map(Stream<T> input){}


    2- flatMap() method use for the transformation & flattering (flatMap = map()+flattering)
    flattering means = [[1,2],[3,4],[5,6]] after flattering [1,2,3,4,5,6]
    takes a Stream of Stream as input and return a Single Stream in output
    It is also called one-to-many mapping
    Stream(R) map(Stream<Stream<T>> input){}

8- Optional
   Avoiding the NullPointerException




